import React, { useState } from 'react';
import api from '../utils/api';
import { useNavigate } from 'react-router-dom';

const OPTIONS = [
  // Waste Management
  { value: 'Recycled', label: '‚ôªÔ∏è Recycled (10 pts)', category: 'Waste Management' },
  { value: 'Composted', label: 'üå± Composted Organic Waste (15 pts)', category: 'Waste Management' },
  { value: 'AvoidedPlastic', label: 'üö´ Avoided Single-Use Plastic (20 pts)', category: 'Waste Management' },
  { value: 'ReusedContainer', label: 'üì¶ Reused Container/Jar (8 pts)', category: 'Waste Management' },
  { value: 'DonatedItems', label: 'üéÅ Donated Unused Items (12 pts)', category: 'Waste Management' },
  { value: 'RepairedInsteadOfBuying', label: 'üîß Repaired Instead of Buying New (18 pts)', category: 'Waste Management' },
  { value: 'UsedReusableBag', label: 'üõçÔ∏è Used Reusable Shopping Bag (5 pts)', category: 'Waste Management' },
  { value: 'RefusedDisposables', label: 'ü•§ Refused Disposable Items (10 pts)', category: 'Waste Management' },
  
  // Transportation
  { value: 'PublicTransport', label: 'üöå Used Public Transport (15 pts)', category: 'Transportation' },
  { value: 'Biked', label: 'üö¥ Biked Instead of Driving (20 pts)', category: 'Transportation' },
  { value: 'Walked', label: 'üö∂ Walked Instead of Driving (18 pts)', category: 'Transportation' },
  { value: 'Carpooled', label: 'üöó Carpooled (12 pts)', category: 'Transportation' },
  { value: 'ElectricVehicle', label: '‚ö° Used Electric Vehicle (25 pts)', category: 'Transportation' },
  { value: 'WorkedFromHome', label: 'üè† Worked From Home (15 pts)', category: 'Transportation' },
  { value: 'CombinedTrips', label: 'üó∫Ô∏è Combined Multiple Trips (10 pts)', category: 'Transportation' },
  
  // Energy
  { value: 'UsedSolarPower', label: '‚òÄÔ∏è Used Solar Power (40 pts)', category: 'Energy' },
  { value: 'UnpluggedDevices', label: 'üîå Unplugged Unused Devices (10 pts)', category: 'Energy' },
  { value: 'UsedNaturalLight', label: 'üí° Used Natural Light (8 pts)', category: 'Energy' },
  { value: 'EnergyEfficientAppliance', label: '‚öôÔ∏è Used Energy Efficient Appliance (30 pts)', category: 'Energy' },
  { value: 'ReducedHeatingCooling', label: 'üå°Ô∏è Reduced Heating/Cooling (15 pts)', category: 'Energy' },
  { value: 'UsedColdWater', label: '‚ùÑÔ∏è Washed with Cold Water (10 pts)', category: 'Energy' },
  { value: 'AirDried', label: 'üå¨Ô∏è Air Dried Clothes (12 pts)', category: 'Energy' },
  
  // Water Conservation
  { value: 'ShortShower', label: 'üöø Took Short Shower (10 pts)', category: 'Water' },
  { value: 'FixedLeak', label: 'üîß Fixed Water Leak (20 pts)', category: 'Water' },
  { value: 'RainwaterHarvesting', label: 'üåßÔ∏è Harvested Rainwater (25 pts)', category: 'Water' },
  { value: 'WateredPlantsEfficiently', label: 'üíß Watered Plants Efficiently (8 pts)', category: 'Water' },
  { value: 'UsedDishwasherFull', label: 'üçΩÔ∏è Used Full Dishwasher Load (10 pts)', category: 'Water' },
  { value: 'InstalledLowFlowFixture', label: 'üö∞ Installed Low-Flow Fixture (22 pts)', category: 'Water' },
  
  // Food & Diet
  { value: 'VegetarianMeal', label: 'ü•ó Ate Vegetarian Meal (15 pts)', category: 'Food' },
  { value: 'VeganMeal', label: 'üåø Ate Vegan Meal (20 pts)', category: 'Food' },
  { value: 'LocalFood', label: 'üè™ Bought Local Food (12 pts)', category: 'Food' },
  { value: 'OrganicFood', label: 'üåæ Bought Organic Food (15 pts)', category: 'Food' },
  { value: 'ReducedFoodWaste', label: 'üóëÔ∏è Reduced Food Waste (10 pts)', category: 'Food' },
  { value: 'MealPrepped', label: 'üç± Meal Prepped (8 pts)', category: 'Food' },
  { value: 'GrewOwnFood', label: 'üåª Grew Own Food (25 pts)', category: 'Food' },
  { value: 'AvoidedProcessedFood', label: 'ü•¶ Avoided Processed Food (10 pts)', category: 'Food' },
  
  // Nature & Environment
  { value: 'PlantedTree', label: 'üå≥ Planted a Tree (50 pts)', category: 'Nature' },
  { value: 'PlantedFlowers', label: 'üå∫ Planted Flowers/Plants (15 pts)', category: 'Nature' },
  { value: 'CreatedBirdHabitat', label: 'üê¶ Created Bird Habitat (20 pts)', category: 'Nature' },
  { value: 'CleanedPark', label: 'üèûÔ∏è Cleaned Park/Trail (25 pts)', category: 'Nature' },
  { value: 'BeachCleanup', label: 'üèñÔ∏è Beach Cleanup (30 pts)', category: 'Nature' },
  { value: 'WildlifeConservation', label: 'ü¶ã Wildlife Conservation Activity (35 pts)', category: 'Nature' },
  { value: 'CommunityGarden', label: 'üåª Worked in Community Garden (20 pts)', category: 'Nature' },
  
  // Shopping & Consumption
  { value: 'BoughtSecondhand', label: 'üëï Bought Secondhand (15 pts)', category: 'Shopping' },
  { value: 'ChoseEcoFriendlyProduct', label: 'üåç Chose Eco-Friendly Product (12 pts)', category: 'Shopping' },
  { value: 'MinimalistPurchase', label: '‚ú® Minimalist Purchase Decision (10 pts)', category: 'Shopping' },
  { value: 'SupportedLocalBusiness', label: 'üè™ Supported Local Business (10 pts)', category: 'Shopping' },
  { value: 'BoughtInBulk', label: 'üì¶ Bought in Bulk (8 pts)', category: 'Shopping' },
  { value: 'AvoidedFastFashion', label: 'üëó Avoided Fast Fashion (18 pts)', category: 'Shopping' },
  
  // Education & Advocacy
  { value: 'EducatedOthers', label: 'üìö Educated Others About Environment (20 pts)', category: 'Advocacy' },
  { value: 'AttendedEcoEvent', label: 'üé™ Attended Eco Event (15 pts)', category: 'Advocacy' },
  { value: 'SignedPetition', label: '‚úçÔ∏è Signed Environmental Petition (10 pts)', category: 'Advocacy' },
  { value: 'VolunteeredForEnvironment', label: 'ü§ù Volunteered for Environment (30 pts)', category: 'Advocacy' },
  { value: 'SharedEcoTips', label: 'üí¨ Shared Eco Tips (12 pts)', category: 'Advocacy' },
  { value: 'ParticipatedInEcoCampaign', label: 'üì¢ Participated in Eco Campaign (25 pts)', category: 'Advocacy' }
];

export default function AddAction(){
  const [category, setCategory] = useState('Recycled');
  const [note, setNote] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedAction, setSelectedAction] = useState(null);
  const navigate = useNavigate();

  // Initialize selected action on mount
  React.useEffect(() => {
    const action = OPTIONS.find(o => o.value === category);
    setSelectedAction(action);
  }, []);

  const handleActionSelect = (value) => {
    setCategory(value);
    const action = OPTIONS.find(o => o.value === value);
    setSelectedAction(action);
  };

  const submit = async (e) => {
    e.preventDefault();
    try{
      console.log('Submitting action:', { category, note });
      const response = await api.post('/actions', { category, note });
      console.log('Action added successfully:', response.data);
      navigate('/');
    }catch(e){ 
      console.error('Error adding action:', e.response?.data || e.message); 
      alert('Failed to add action: ' + (e.response?.data?.message || e.message));
    }
  }

  // Group options by category
  const groupedOptions = OPTIONS.reduce((acc, option) => {
    if (!acc[option.category]) acc[option.category] = [];
    acc[option.category].push(option);
    return acc;
  }, {});

  // Filter options based on search
  const filteredOptions = OPTIONS.filter(o => 
    o.label.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="add-action-container">
      <form onSubmit={submit}>
        <h2>Add Eco Action</h2>
        
        {/* Selected Action Display */}
        {selectedAction && (
          <div className="selected-action-card">
            <div className="selected-action-header">
              <span className="selected-action-emoji">{selectedAction.label.split(' ')[0]}</span>
              <div className="selected-action-info">
                <h3>{selectedAction.label.split(' ').slice(1).join(' ')}</h3>
                <span className="selected-action-category">{selectedAction.category}</span>
              </div>
            </div>
          </div>
        )}

        <div className="form-row">
          <label>üîç Search Action</label>
          <input 
            type="text"
            placeholder="Type to search actions..."
            value={searchTerm} 
            onChange={e=>setSearchTerm(e.target.value)} 
            className="search-input"
          />
        </div>

        <div className="form-row">
          <label>üìã Select Action</label>
          <select 
            value={category} 
            onChange={e=>handleActionSelect(e.target.value)}
            size="8"
            className="action-select"
          >
            {searchTerm ? (
              // Show filtered results
              filteredOptions.map(o=> 
                <option key={o.value} value={o.value}>{o.label}</option>
              )
            ) : (
              // Show grouped by category
              Object.entries(groupedOptions).map(([cat, options]) => (
                <optgroup key={cat} label={`‚îÅ‚îÅ ${cat} ‚îÅ‚îÅ`}>
                  {options.map(o=> 
                    <option key={o.value} value={o.value}>{o.label}</option>
                  )}
                </optgroup>
              ))
            )}
          </select>
        </div>

        <div className="form-row">
          <label>üìù Note (Optional)</label>
          <textarea 
            placeholder="Add any additional details about this action..."
            value={note} 
            onChange={e=>setNote(e.target.value)}
            rows="4"
            className="note-textarea"
          />
        </div>
        
        <button className="btn btn-submit" type="submit">
          <span className="btn-icon">‚úì</span>
          Add Action
        </button>
      </form>
    </div>
  )
}
